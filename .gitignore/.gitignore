@@ -0,0 +1,228 @@
/**
 * Java 1. Lesson 4. Tic-tac-toe in console
 *
 * @author Sergey Iryupin changed by Yana Rodina
 * @version dated May 20, 2018
 */
import java.util.Random;
import java.util.Scanner;

class TicTacToe {

    final int SIZE = 5;
    final char DOT_X = 'x';
    final char DOT_O = 'o';
    final char DOT_EMPTY = '.';
    final char DOTS_TO_WIN = 4;
    char[][] map = new char[SIZE][SIZE];
    Scanner sc = new Scanner(System.in);
    Random rand = new Random();

    public static void main(String[] args) {
        new TicTacToe();
    }


    TicTacToe() {
        initMap();
        printMap();
        while (true) {
            humanTurn();
            if (checkWin(DOT_X)) {
                System.out.println("YOU WON!");
                break;
            }
            if (isMapFull()) {
                System.out.println("Sorry, DRAW!");
                break;
            }
            aiTurn();
            printMap();
            if (checkWin(DOT_O)) {
                System.out.println("AI WON!");
                break;
            }
            if (isMapFull()) {
                System.out.println("Sorry, DRAW!");
                break;
            }
        }
        System.out.println("GAME OVER.");
        printMap();
    }

    void initMap() {
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                map[i][j] = DOT_EMPTY;
    }

    void printMap() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++)
                System.out.print(map[i][j] + " ");
            System.out.println();
        }
        System.out.println();
    }

    void humanTurn() {
        int x, y;
        do {
            System.out.println("Enter X and Y (1.." + SIZE + "):");
            x = sc.nextInt() - 1;
            y = sc.nextInt() - 1;
        } while (!isCellValid(x, y));
        map[y][x] = DOT_X;
    }

    void aiTurn() {
        int x, y, h, v, count;
        //x = y = 0;
        boolean isDangerous = false;

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == DOT_X) {
                    // check horizontals
                    h = i;
                    v = j;
                    count = 1;
                    while (++h < SIZE && map[h][v] == DOT_X) count++;
                    if (count >= DOTS_TO_WIN - 2) {
                        x = v;
                        y = (h < SIZE) ? h : i - 1;
                        if (isCellValid(x, y)) {
                            map[y][x] = DOT_O;
                            isDangerous = true;
                            break;
                        }
                    }
                    // check verticals
                    h = i;
                    v = j;
                    count = 1;
                    while (++v < SIZE && map[h][v] == DOT_X) count++;
                    if (count >= DOTS_TO_WIN - 2) {
                        y = h;
                        x = (v < SIZE) ? v : j - 1;
                        if (isCellValid(x, y)) {
                            map[y][x] = DOT_O;
                            isDangerous = true;
                            break;
                        }
                    }
                    // check diagonal 1
                    h = i;
                    v = j;
                    count = 1;
                    while (++h < SIZE && ++v < SIZE && map[h][v] == DOT_X) count++;
                    if (count >= DOTS_TO_WIN - 2)  {
                        if (h < SIZE && v < SIZE) {
                            x = v;
                            y = h;
                            if (isCellValid(x, y)) {
                                map[y][x] = DOT_O;
                                isDangerous = true;
                                break;
                            }
                        } else if (i > 0 && j > 0) {
                            x = j - 1;
                            y = i - 1;
                            if (isCellValid(x, y)) {
                                map[y][x] = DOT_O;
                                isDangerous = true;
                                break;
                            }
                        }
                    }
                    // check diagonal 2
                    h = i;
                    v = j;
                    count = 1;
                    while (++h < SIZE && --v >= 0 && map[h][v] == DOT_O) count++;
                    if (count >= DOTS_TO_WIN - 2) {
                        if (h < SIZE && v >= 0) {
                            x = v;
                            y = h;
                            if (isCellValid(x, y)) {
                                map[y][x] = DOT_O;
                                isDangerous = true;
                                break;
                            }
                        }
                        else if (i > 0 && j < (SIZE - 1)) {
                            x = j + 1;
                            y = i - 1;
                            if (isCellValid(x, y)) {
                                map[y][x] = DOT_O;
                                isDangerous = true;
                                break;
                            }
                        }
                    }
                }
            }
            if (isDangerous) break;
        }
        if (!isDangerous) {
            do {
                x = rand.nextInt(SIZE);
                y = rand.nextInt(SIZE);
            } while (!isCellValid(x, y));
            map[y][x] = DOT_O;
        }
    }

    boolean checkWin(char dot) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == dot) {
                    // check verticals
                    int h = i;
                    int v = j;
                    int count = 1;
                    while (++v < SIZE && map[h][v] == dot) count++;
                    if (count == DOTS_TO_WIN) return true;

                    // check horizontals
                    h = i;
                    v = j;
                    count = 1;
                    while (++h < SIZE && map[h][v] == dot) count++;
                    if (count == DOTS_TO_WIN) return true;

                    // check diagonal 1
                    h = i;
                    v = j;
                    count = 1;
                    while (++h < SIZE && ++v < SIZE && map[h][v] == dot) count++;
                    if (count == DOTS_TO_WIN) return true;

                    // check diagonal 2
                    h = i;
                    v = j;
                    count = 1;
                    while (++h < SIZE && --v >= 0 && map[h][v] == dot) count++;
                    if (count == DOTS_TO_WIN) return true;
                }
            }
        }
        return false;
    }


    boolean isMapFull() {
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                if (map[i][j] == DOT_EMPTY)
                    return false;
        return true;
    }

    boolean isCellValid(int x, int y) {
        if (x < 0 || y < 0 || x >= SIZE || y >= SIZE)
            return false;
        return map[y][x] == DOT_EMPTY; // by DSerov
    }
}
